===============================
2. Say my name module
===============================

Import module
-------------
>>> say_my_name = __import__('3-say_my_name').say_my_name

Function
--------
A function that prints `My name is <first name> <last name>`

Operations
----------
first_name and last_name must be strings otherwise,
raise a TypeError exception with the message
first_name must be a string or last_name must be a string

    Tests
=============

Normal use
----------
0. When only one arg is given i.e firstname
	>>> say_my_name("John")
	My name is John 

1. When both args are given
	>>> say_my_name("John", "Doe")
	My name is John Doe

2. When a pointer to an array of names is passed
	>>> names = ["Tony", "Knights"]
	>>> say_my_name(*names)
	My name is Tony Knights

3. When it is a comination of ascii values
	>>> say_my_name(chr(65), chr(66))
	My name is A B

4. When only the last name is provided
	>>> say_my_name(" ", "Santiago")
	My name is   Santiago

5. When both values are emoty strings
	>>> say_my_name(" ", " ")
	My name is    


Errors
------
0. When no args are given
	>>> say_my_name()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

1. When one arg is not string
	>>> say_my_name("Jon", 0)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/3-say_my_name.py", line 9, in say_my_name
	    raise TypeError('last_name must be a string')
	TypeError: last_name must be a string

2. When the only positional arg given is a string
	>>> say_my_name(0)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/3-say_my_name.py", line 7, in say_my_name
	    raise TypeError('first_name must be a string')
	TypeError: first_name must be a string
