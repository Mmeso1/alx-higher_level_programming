====================
 0. Integers addition
====================

Import Module
====================
	>>> add_integer = __import__('0-add_integer').add_integer

Function:
===================
The add_integer function returns the sum of 2 integers

Operations:
==================
‘a’ and ‘b’ must be integers or floats, otherwise raise a TypeError exception
with the message 'a must be an integer' or 'b must be an integer'.

Tests
=================

Normal Use
-----------------

0. With one argument:
	>>> add_integer(3)
	101

1. Without the first argument:
	>>> add_integer(None , 3)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer
	    raise TypeError('a must be an integer')
	TypeError: a must be an integer

2. With both arguments:
	>>> add_integer(70, 95)
	165

3. When either argument is a float:
	>>> add_integer(25, 69.8)
	94

4. When both arguments are floats:
	>>> add_integer(25.3, 69.8)
	94

5. When the arguments are a range of values within the number of arguments:
	>>> add_integer(*range(4, 6))
	9

6. When the arguments are multiple value:
	>>> [add_integer(i%2, i) for i in range(1, 4)]
	[2, 2, 4]

7. With min and max float arguments:
	>>> add_integer(1.175494351e-38, 3.402823466e+38) 
	340282346600000016151267322115014000640

8. With min and max int arguments:
	>>> add_integer(-2147483647, 2147483647)
	0

9. When the args are either floats or integers and negative or positive:
	add_integer(2.5, -3.5)
	-1

10. When either arguments is really long:
	>>> add_integer(999999999999999999999999999999, 1)
	1000000000000000000000000000000


==============

Errors
--------------
0. With no arguments:
	>>> add_integer()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: add_integer() missing 1 required positional argument: 'a'

1. When the arguments are a range of values more than the number of arguments:
	>>> add_integer(*range(1, 4))
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

2. When none is one or both of the arguments
	>>> add_integer(None, 5)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer
	    raise TypeError('a must be an integer')
	TypeError: a must be an integer

3. When the value of an argument  is nan (inf will give a similar response):
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
	    return int(a) + int(b)
	ValueError: cannot convert float NaN to integer

4. When either of the arguments is not a float or int:
	>>> add_integer(1, "hello")
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer
	    raise TypeError('b must be an integer')
	TypeError: b must be an integer

5. When the wrong function name is used:
	>>> ad_integer(4, 4)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	NameError: name 'ad_integer' is not defined

6. When there is a float overflow:
	>>> add_integer(5, 1e400)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
	    return int(a) + int(b)
	OverflowError: cannot convert float infinity to integer
