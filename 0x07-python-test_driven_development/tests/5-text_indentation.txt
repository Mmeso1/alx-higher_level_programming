==========================
4. Text indentation module
===========================

Import module
-------------
	>>> text_indentation = __import__('5-text_indentation').text_indentation

Function
--------
It prints a text with 2 new lines after each of these characters: ., ? and :

Note
----
    * text must be a string, otherwise raise a TypeError exception
    with the message 'text must be a string'.

    * There should be no space at the beginning or at the
    end of each printed line.


    Test
-----------

Normal Use
----------
0. When a text is passed
	>>> text_indentation("Mmesoma is the best girl to have ever existed")
	Mmesoma is the best girl to have ever existed

1. When only the symbols are passed
	>>> text_indentation(":?.")
	:
	<BLANKLINE>
	?
	<BLANKLINE>
	.
	<BLANKLINE>

2. When there is a text but it containd symbols
	>>> text_indentation("What is that? Oh it is cyber wand. Right: Go down to your left")
	What is that?
	<BLANKLINE>
	Oh it is cyber wand.
	<BLANKLINE>
	Right:
	<BLANKLINE>
	Go down to your left

3. Another normal test
	Go down to your left>>> text_indentation(" wq ")
	wq >>>

4. When an empty string is passed as th arg
	>>> text_indentation(" ")



Errors
--------
0. When an integer is provided as the text
	>>> text_indentation(3)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/alx-higher_level_programming/0x07-python-test_driven_development/5-text_indentation.py", line 13, in text_indentation
	    raise TypeError('text must be a string')
	TypeError: text must be a string

1. When there is no argument
	>>> text_indentation( )
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: text_indentation() missing 1 required positional argument: 'text'
